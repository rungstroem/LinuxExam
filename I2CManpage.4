." The manual page for the developed kernel module
." This is the header that contains name, section number, (left and center footer, and center header) where text will be displayed on every page
." section number is 4 because that is the header for devices, and this is a device driver.
." Sections are created with .SH for section header

.TH I2CKernelModule 4 "LEO 2 2021" "version 0.01 alpha"

.SH NAME
I2CKernelModule \- Interfaces the I2C hardware with userspace through a file device. The module is made for the MPU60x0 line of IMUs.

.SH SYNOPSIS
echo
.I COMMAND
> dev/I2CDriver
.br
cat /dev/I2CDriver

.SH DESCRIPTION
I2CKernelModule is a device driver for interfacing with the MPU60x0 series IMUs. The driver can be used with any system that features dedicated I2C hardware, like the Raspberry PI and in general most SOCs.
Upon load the driver automatically enables the first I2C interface hardware, I2C-1 / I2C-arm, that is present on most SOCs and makes the appropriate configurations. Different SOCs use different physical connections to the hardware, it is, therefore, necessary to consult the SOC's datasheet for correct wiring of the IMU.

The driver simplifies interfacing with the IMUs by making itself available as a file device in the /dev folder. The file device ensures that userspace programs have access to the kernels' I2C sub-system. Users may read from or write to the file device either through simple command-line tools, like "echo" and "cat", or may open the device as a file in a separate program.
Furthermore, the driver simplifies interfacing with the IMUs by defining a set of commands that either read from or write to specific registers on the IMU.
The driver may be compiled with the kernel or inserted at run time. For systems utilizing the device tree structure, a device tree overlay is specifically created for the driver. This will handle the setup of I2C and load of the module on boot.

.SH EXAMPLE
.I "echo TEMPH > /dev/I2CDriver"
.RS
The driver transmits the address of the temperature high byte register.
.RE
.br
.I "cat /dev/I2CDriver"
.RS
The driver transmits a read command to the I2C device.
The device will transmit back the value stored in the previously pointed register.
.RE

.SH CONFIG
The driver configures the I2C-1 / I2C-arm interface for standard 100kHz bus frequency and setup the interface for communication with the I2C-slave address 0x68. The Raspberry PI connects the I2C-1 hardware to GPIO pins 3 and 5.
.br
To enable the I2C hardware and the "dtparam=i2c_arm=on" or "dtparam=i2c1=on" should be set in the "/boot/config.txt" file.
If autoloading with device-tree is needed, the previous parameter does not need to be set. Instead, see section: 
.B AUTOLOAD

.SH COMMANDS
Supported commands used when writing to and reading from the IMU.

.RS
.BR getID
- returns the IMUs' id

.B TEMPH
- returns the high byte of the temperature sensors' measurement

.B TEMPL
- returns the low byte of the temperature sensors' measurement

.B ACCXH
- Returns the high byte of the accelerometer's X-axis measurement

.B ACCXL
-Returns the low byte of the accelerometer's X-axis measurement

.B ACCYH
- Returns the high byte of the accelerometer's Y-axis measurement

.B ACCYL
- Returns the low byte of the accelerometer's Y-axis measurement

.B ACCZH
- Returns the high byte of the accelerometer's Z-axis measurement

.B ACCZL
- Returns the low byte of the accelerometer's Z-axis measurement

.B GYRXH
- Returns the high byte of the gyroscope's angular velocity around the X-axis

.B GYRXL
- Returns the low byte of the gyroscope's angular velocity around the X-axis

.B GYRYH
- Returns the high byte of the gyroscope's angular velocity around the Y-axis

.B GYRYL
- Returns the low byte of the gyroscope's angular velocity around the Y-axis

.B GYRZH
- Returns the high byte of the gyroscope's angular velocity around the Z-axis

.B GYRZL
- Returns the low byte of the gyroscope's angular velocity around the Z-axis
.RE

Each command takes arguments in the form of decimal values. When specifying an argument with a command, the argument is transmitted to the I2C-slave device with an I2C write command. The I2C-slave device then overwrites the content of the respective register with the argument.
.br
Useful for resetting a measurement.

.SH OPTIONS
.B -a, --address XX
.br
Specify alternative I2C-slave address. replace XX with the address.
.br
The option is useful for I2C-slave devices with different addresses.

.B -f, --freq 100 / 400
.br
Changes the frequency of the I2C hardware. 100 for 100kHz, 400 for 400kHz.
.br
The default transfer frequency is 100kHz. If the I2C-slave device supports fast data transfer, set the argument to 400, for 400kHz high-speed data transfer.

.SH AUTO-LOAD
The driver may be loaded with the command "insmod Kernelmodule.ko". This inserts the module into the running kernel. To unload the module the command "rmmod Kernelmodule" can be used.

Using the device-tree overlay "I2CDriver.dtbo" the device driver can be autoloaded upon boot of the kernel.
To do this copy the overlay to the "/boot/overlays" directory and add  "dtoverlay=I2CDriver" to the config.txt file.
Autoloading with device-tree is dependent on modprobe.

Initializing modprobe. The module is placed in the "/lib/modules/{kernel version}/drivers/" and the command "depmod -a" is issued.
The module can now be inserter by calling "modprobe {name}".
The module may be unloaded with the command "modprobe -r {name}".

.SH BUGS
Known bugs.
Unloading the module from the kernel using rmmod does not seem to work as the module cannot be loaded again using insmod.
A reboot is needed.

.SH AUTHOR
This program is solely written and maintained by the author:
.RS
Kenneth Rungstroem Larsen.
.RE

Contact:
.RS
rungstroem@gmail.com
.RE
for more information or bug reports.
